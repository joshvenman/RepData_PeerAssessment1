f(3)
x <- 5
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x
y
list.files("specdata")
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
?solve
?matrix
seq <- 1:6
seq
seq <- seq(1:6)
seq
m <- matrix(seq,1)
m
m <- matrix(seq,2)
m
m <- matrix(seq,1,2)
m
m <- matrix(seq,,2)
m
s <- solve(m)
seq <- seq(1:9)
m <- matrix(seq,3)
m
s <- solve(m)
s
?solve
is.matrix(m)
solve(m) %*% m == diag(nrow = nrow(m), ncol = ncol(m))
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
solve(m)
m <- matrix(c(0, 22, 111, 2), nrow = 2, ncol = 2, byrow = TRUE)
m
solve(m)
mi <- solve(m)
m * mi
m
matrix(c(4,2,7,6),2,2)
solve(matrix(c(4,2,7,6),2,2))
source('~/.active-rstudio-document', echo=TRUE)
makeVector(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
str(makeVector)
summary(makeVector)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheMean
cachemean
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
x <- 1:10000
str(x)
v <- makeVector(x)
v
v$getmean()
mx <- mean(x)
mx
v$setmean(mx)
m
v$getmean()
v$getenv()
v$getevn()
ls(v$getevn())
parent.env(v$getevn())
ls(parent.env(v$getevn()))
parent.env(v$getevn())$m
v <- makeVebdtor(1:10)
v <- makeVector(1:10)
cachemean(v)
?matrix
m <- matrix(1:6,3,3)
m
solve(m)
?solve
m <- matrix(c(4,7,2,6),2,2)
m
solve(m)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
m <- matrix(c(4,7,2,6),2,2)
m
makeCacheMatrix(m)
source('~/.active-rstudio-document', echo=TRUE)
makeCacheMatrix(m)
mv <- makeCacheMatrix(m)
mv
mv$getinv
mv$getinv()
mi <- solve(m)
mi
mv$setinv(mi)
mv$getinv()
mv$getenv()
ls(mv$getemv())
ls(mv$getenv())
ls(parent.env(mv$getemv()))
ls(parent.env(mv$getenv()))
parent.env(mv$getenv())$m
parent.env(mv$getenv())$inv
m
m2 <- m
m2
identical(m,m2)
m3 <- matrix(c(4,7,3,6),2,2)
identical(m1,m3)
identical(m,m3)
identical(m2,m3)
identical(m,m2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
m
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
m <- matrix(c(4,7,2,6),2,2)
m <- matrix(c(4,7,2,6),2,2)
mv <- makeCacheMatrix(m)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
mv <- makeCacheMatrix(m)
cacheSolve(mv)
source('~/.active-rstudio-document', echo=TRUE)
m <- matrix(c(4,7,2,6),2,2)
mv <- makeCacheMatrix(m)
cacheSolve(mv)
cacheSolve(mv)
cacheSolve(mv)
cacheSolve(mv)
mv2 <- makeCacheMatrix(m2)
cacheSolve(mv2)
mv2
cacheSolve(mv2)
m2
m <- matrix(c(4,7,2,6),2,2)
m2 <- matrix(c(4,7,3,6),2,2)
mv2 <- makeCacheMatrix(m2)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv)
foo <- 44
foo
print("foo is" + foo)
print("foo is" +as.characater(foo)
)
print("foo is" +as.character(foo)
)
print("foo, ",foo)
print(paste("value = ",foo))
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv)
cacheSolve(mv)
source('~/.active-rstudio-document', echo=TRUE)
m
m2
mv1 <- makeCacheMatrix(m)
mv2 <- makeCacheMatrix(m2)
identical(m,m2)
cacheSolve(mv1)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
mv1 <- makeCacheMatrix(m)
mv2 <- makeCacheMatrix(m2)
cacheSolve(mv1)
cacheSolve(mv2)
ls(mv1)
ls(mv2)
mv1$get()
mv2$get()
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv2)
source('~/.active-rstudio-document', echo=TRUE)
cacheSOlve(mv1)
cacheSolve(mv1)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv2)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv2)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv2)
cacheSolve(mv2)
cacheSolve(mv2)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
library(datasets)
head(airquality)
str(airquality)
?rnorm
rnorm(10)
rnorm(10,10)
set.seed(1)
rnorm(4)
rnorm(4)
set.seed(1)
rnorm(4)
d <- 1:10
sample(d,4)
sample(d,4)
sample(d,4)
sample(d,4)
sample(d,4)
seed(1)
set.seed(1)
sample(d,4)
sample(d,4)
set.seed(1)
sample(d,4)
sample(letters,10)
sample(letters,10)
set.seed(1)
sample(letters,10)
sample(letters,10)
set.seed(1)
sample(letters,10)
?lm
?r.profiler
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
source('C:/Users/jvenman/Dropbox/Learning/Coursera/Data Science/R Programming/MatrixInversionWorking.R', echo=TRUE)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
cacheSolve(mv1)
?Rprof
Rprof()
cacheSolve(mv1)
RprofSummary()
summaryRprof()
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rbinom
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?qpois
install.package("RPostgreSQL")
install.packages("RPostgreSQL")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
install.packages("jpeg")
con <- dbConnect(PostgreSQL(), user= "general", password="s[@O'r]2T0**B{F", dbname="gluestores")
con <- dbConnect(PostgreSQL(), host="aucomgarycjohnson-postgres.c95kmhtudvaz.ap-southeast-2.rds.amazonaws.com" user= "general", password="s[@O'r]2T0**B{F", dbname="gluestores")
dbhost  <- "aucomgarycjohnson-postgres.c95kmhtudvaz.ap-southeast-2.rds.amazonaws.com"
dbhost
dbport <- 5432
con <- dbConnect(PostgreSQL(), port=dbport, host=dbhost, user="general", password="s[@O'r]2T0**B{F", dbname="gluestores")
con <- dbConnect(PostgreSQL(), host="aucomgarycjohnson-postgres.c95kmhtudvaz.ap-southeast-2.rds.amazonaws.com" user= "general", password="s[@O'r]2T0**B{F", dbname="gluestores")
con <- dbConnect(PostgreSQL(), host="aucomgarycjohnson-postgres.c95kmhtudvaz.ap-southeast-2.rds.amazonaws.com", user= "general", password="s[@O'r]2T0**B{F", dbname="gluestores")
rs <- dbSendQuery(con,"select * from weather")
head(rs)
str(rs)
rs
nrow(rs)
summary(rs)
dbListFields(con,"weather")
dbListTables(con)
?drrame
?dframe
w <- dbReadTable(con,"weather")
str(w)
summary(w)
head(w)
tail(w)
dbListFields(con,"weather")
w <- dbReadTable(con,"weather")
head(w)
dev.cur()
library(datasets)
hist(airquality$Ozone)
with(airquality,plot(Wind,Ozone))
?lines
colors()
?rug
hist(airquality$Ozone)
rug()
rug(10)
rug(20)
pch()
?pch
?par
install.package("lattice")
install.packages("lattice")
library(lattice)
library(datasets)
?xyplot
str(airquality)
xyplot(Ozone ~ Wind,data=airquality)
xyplot(Wind ~ Ozone, data = airquality)
xyplot(Ozone ~ Wind,data=airquality)
library(dplyr)
?transform
aq <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = aq)
xyplot(Ozone ~ Wind | Month, data = aq, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = aq, layout = c(5,2
)
)
xyplot(Ozone ~ Wind | Month, data = aq, layout = c(2,5))
xyplot(Ozone ~ Wind | Month, data = aq, layout = c(1,5))
xyplot(Ozone ~ Wind | Month, data = aq, layout = c(5,1))\
xyplot(Ozone ~ Wind | Month, data = aq, layout = c(5,1))
class(xyplot(Ozone ~ Wind | Month, data = aq, layout = c(5,1)))
p <- xyplot(Ozone ~ Wind | Month, data = aq, layout = c(5,1))
print(p)
p <- xyplot(Ozone ~ Wind | Month, data = aq)
p <- xyplot(Ozone ~ Wind, data = aq)
xyplot(Ozone ~ Wind, data = aq)
xyplot(Ozone ~ Wind | Month, data = aq)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
print(p)
trellis.par.get()
install.packages("ggplot2")
library(ggplot2)
data(airquality)
str(mpg)
qplot(Ozone,Wind, data = aq)
qplot(Ozone,Wind, data = aq, color=Month)
qplot(Ozone,Wind, data = aq, geom=("point"))
qplot(Ozone,Wind, data = aq, geom=("point","smooth"))
qplot(Ozone,Wind, data = aq, geom=c("point","smooth"))
qplot(Ozeon,Wind,data=aq,facets = .~Month)
qplot(Ozone,Wind,data=aq,facets = .~Month)
qplot(Wind,Ozone,data=aq,facets = .~Month)
qplot(Wind,Ozone,data=airquality,facets = .~Month)
qplot(Wind,Ozone,data=airquality,facets = .~factor(Month))
data(airquality)
str(airquality)
qplot(Wind,Ozone,data=airquality,facets = .~Month)
airquality = transform(airquality, Month = factor(Month))
str(airquality)
qplot(Wind,Ozone,data=airquality,facets = .~Month)
qplot(Wind,Ozone,data=airquality,facets = .~factor(Month))
g <- ggplot(movies, aes(votes, rating))
str(g)
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, geom="smooth")
qplot(votes, rating, data = movies, geom="loess")
qplot(votes, rating, data = movies, smooth="loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
?geom_Smooth
?geom_smooth
str(g)
g <- ggplot(movies, aes(votes, rating)) + geom_point()
print(g)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | Month, data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
print(p)
install.packages("gridExtra")
install.packages("knitr")
library(knitr)
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
?colors()
colors(0)
colors()
install.packages("RColorBrewer")
setwd("~/Dropbox/Learning/Coursera/Data Science/Reproducible Research/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("testing.Rmd")
update.packages()
update.packages()
